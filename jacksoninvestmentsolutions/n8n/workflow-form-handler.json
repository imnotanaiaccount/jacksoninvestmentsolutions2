{
  "name": "Jackson Investment Solutions - Form Handler (Secured)",
  "nodes": [
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $node[\"Webhook\"].json[\"__ow_headers\"]?.['x-forwarded-for'] || '' }}",
              "operation": "isEmpty",
              "value2": ""
            }
          ]
        },
        "options": {}
      },
      "name": "IF IP Missing",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        650,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Block the request\nreturn {\n  response: {\n    statusCode: 429,\n    body: {\n      status: 'error',\n      message: 'Too many requests. Please try again later.'\n    }\n  }\n};"
      },
      "name": "Function - Block Request",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        900,
        100
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "data": "={{ $node[\"Webhook\"].json[\"__ow_headers\"]?.['x-forwarded-for'] || '' }}",
              "key": "ip"
            },
            {
              "data": "={{ new Date().toISOString().split('T')[0] }}",
              "key": "date"
            },
            {
              "data": "={{ $node[\"Webhook\"].json.emailAddress || 'unknown' }}",
              "key": "email"
            }
          ]
        },
        "options": {}
      },
      "name": "Ratelimiter - Track Request",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Check if IP is in blocklist (you can replace this with a database lookup)\nconst blockedIPs = []; // Add known spam IPs here\nconst clientIP = $input.item.json.ip;\n\nif (blockedIPs.includes(clientIP)) {\n  return {\n    json: {\n      isBlocked: true,\n      reason: 'IP address is in blocklist'\n    }\n  };\n}\n\n// Check rate limit (e.g., 5 requests per minute per IP)\nconst maxRequests = 5;\nconst timeWindow = 60; // seconds\nconst cacheKey = `rate_limit_${clientIP}_${new Date().toISOString().split(':')[0]}`;\nlet requestCount = $input.item.json.cache[cacheKey] || 0;\n\nif (requestCount >= maxRequests) {\n  return {\n    json: {\n      isBlocked: true,\n      reason: 'Rate limit exceeded. Please try again later.'\n    }\n  };\n}\n\n// Increment request count\nrequestCount++;\n$input.item.json.cache[cacheKey] = requestCount;\n\nreturn {\n  json: {\n    isBlocked: false,\n    requestCount,\n    timeWindow,\n    resetIn: timeWindow - (Math.floor(Date.now() / 1000) % timeWindow)\n  }\n};"
      },
      "name": "Function - Check Rate Limit",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1150,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $node[\"Function - Check Rate Limit\"].json[0].isBlocked }}",
              "value2": true
            }
          ]
        },
        "options": {}
      },
      "name": "IF Rate Limited",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1400,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Return rate limit exceeded response\nreturn {\n  response: {\n    statusCode: 429,\n    body: {\n      status: 'error',\n      message: $node[\"Function - Check Rate Limit\"].json[0].reason || 'Too many requests. Please try again later.',\n      retryAfter: $node[\"Function - Check Rate Limit\"].json[0].resetIn\n    }\n  }\n};"
      },
      "name": "Function - Rate Limit Exceeded",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1650,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "// Validate form data\nconst formData = $input.item.json;\nconst errors = [];\n\n// Required fields\nconst requiredFields = ['fullName', 'emailAddress', 'phoneNumber', 'interestType'];\nrequiredFields.forEach(field => {\n  if (!formData[field]?.trim()) {\n    errors.push(`Field ${field} is required`);\n  }\n});\n\n// Email format\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\nif (formData.emailAddress && !emailRegex.test(formData.emailAddress)) {\n  errors.push('Invalid email format');\n}\n\n// Phone number format (basic validation)\nconst phoneRegex = /^[\\d\\s\\(\\)\\-\\.\\+]+$/;\nif (formData.phoneNumber && !phoneRegex.test(formData.phoneNumber)) {\n  errors.push('Invalid phone number format');\n}\n\n// Check for spam indicators\nconst spamKeywords = ['http', 'www', '.ru', '.cn', 'viagra', 'loan', 'mortgage', 'free', 'win', 'prize'];\nspamKeywords.forEach(keyword => {\n  Object.values(formData).forEach(value => {\n    if (typeof value === 'string' && value.toLowerCase().includes(keyword)) {\n      errors.push('Suspicious content detected');\n    }\n  });\n});\n\nif (errors.length > 0) {\n  return {\n    response: {\n      statusCode: 400,\n      body: {\n        status: 'error',\n        message: 'Validation failed',\n        errors\n      }\n    }\n  };\n}\n\nreturn {\n  json: formData\n};"
      },
      "name": "Function - Validate Form Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1900,
        300
      ]
    },
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        250,
        300
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "form-submission",
        "responseMode": "onReceived",
        "responseData": "allEntries",
        "options": {
          "response": {
            "responseCode": 200,
            "responseBody": "{\"status\":\"success\",\"message\":\"Thank you for your submission. We'll be in touch shortly.\"}",
            "responseHeaders": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "X-Content-Type-Options",
                "value": "nosniff"
              },
              {
                "name": "X-Frame-Options",
                "value": "DENY"
              },
              {
                "name": "X-XSS-Protection",
                "value": "1; mode=block"
              },
              {
                "name": "Referrer-Policy",
                "value": "same-origin"
              },
              {
                "name": "Permissions-Policy",
                "value": "camera=(), microphone=(), geolocation=()"
              }
            ]
          }
        }
      },
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        450,
        300
      ],
      "webhookId": "jackson-investment-form"
    },
    {
      "parameters": {
        "functionCode": "// Prepare email content\nconst formData = $input.item.json;\n\n// Format the email body\nlet emailBody = `\n  <h2>New Contact Form Submission</h2>\n  <p><strong>Name:</strong> ${formData.fullName || 'Not provided'}</p>\n  <p><strong>Email:</strong> ${formData.emailAddress || 'Not provided'}</p>\n  <p><strong>Phone:</strong> ${formData.phoneNumber || 'Not provided'}</p>\n  <p><strong>Interest:</strong> ${formData.interestType || 'Not specified'}</p>\n  `;\n\n// Add property address if provided\nif (formData.propertyAddress) {\n  emailBody += `<p><strong>Property Address:</strong> ${formData.propertyAddress}</p>`;\n}\n\n// Add situation if provided\nif (formData.propertySituation) {\n  emailBody += `<p><strong>Situation:</strong> ${formData.propertySituation}</p>`;\n}\n\n// Add timeline if provided\nif (formData.sellTimeline) {\n  emailBody += `<p><strong>Sell Timeline:</strong> ${formData.sellTimeline}</p>`;\n}\n\n// Add additional info if provided\nif (formData.additionalInfo) {\n  emailBody += `\n  <h3>Additional Information:</h3>\n  <p>${formData.additionalInfo.replace(/\\n/g, '<br>')}</p>\n  `;\n}\n\n// Add metadata\nemailBody += `\n<hr>\n<p style=\"font-size: 0.8em; color: #666;\">\n  Submitted on: ${new Date().toLocaleString()}<br>\n  Form: ${formData['form-name'] || 'N/A'}<br>\n  IP: ${$input.item.json.__ow_headers?.['x-forwarded-for'] || 'Unknown'}\n</p>\n`;\n\n// Set the output\nreturn {\n  json: {\n    to: 'YOUR_EMAIL@example.com',  // Replace with your email\n    subject: `New Contact: ${formData.fullName || 'New Lead'} - ${formData.interestType || 'No Interest Specified'}`,\n    html: emailBody,\n    formData: formData\n  }\n};"
      },
      "name": "Function - Prepare Email",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        700,
        300
      ]
    },
    {
      "parameters": {
        "fromEmail": "noreply@jacksoninvestmentsolutions.com",
        "options": {}
      },
      "name": "Email - Send to Admin",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [
        1000,
        300
      ],
      "credentials": {
        "smtp": "smtp-account"
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $node[\"Webhook\"].json[\"form-name\"] || '' }}",
              "operation": "equals",
              "value2": "property-inquiry"
            }
          ]
        },
        "options": {}
      },
      "name": "IF Form is Property Inquiry",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1750,
        300
      ]
    },
    {
      "parameters": {
        "operation": "create",
        "entityType": "lead",
        "fields": {
          "values": [
            {
              "name": "firstname",
              "value": "={{ $node[\"Webhook\"].json.fullName ? $node[\"Webhook\"].json.fullName.split(' ')[0] : 'Unknown' }}"
            },
            {
              "name": "lastname",
              "value": "={{ $node[\"Webhook\"].json.fullName ? $node[\"Webhook\"].json.fullName.split(' ').slice(1).join(' ') || 'Lead' : 'Lead' }}"
            },
            {
              "name": "emailaddress1",
              "value": "={{ $node[\"Webhook\"].json.emailAddress }}"
            },
            {
              "name": "telephone1",
              "value": "={{ $node[\"Webhook\"].json.phoneNumber }}"
            },
            {
              "name": "description",
              "value": "=Form Submission Details:\n\nInterest: {{$node[\"Webhook\"].json.interestType}}\nProperty Address: {{$node[\"Webhook\"].json.propertyAddress || 'Not provided'}}\nSituation: {{$node[\"Webhook\"].json.propertySituation || 'Not specified'}}\nTimeline: {{$node[\"Webhook\"].json.sellTimeline || 'Not specified'}}\n\nAdditional Info:\n{{$node[\"Webhook\"].json.additionalInfo || 'None'}}"
            },
            {
              "name": "leadqualitycode",
              "value": "1"
            },
            {
              "name": "leadsourcecode",
              "value": "1"
            },
            {
              "name": "subject",
              "value": "New Lead from Website - {{$node[\"Webhook\"].json.interestType || 'General Inquiry'}}"
            }
          ]
        },
        "options": {}
      },
      "name": "Dynamics 365 - Create Lead",
      "type": "n8n-nodes-base.microsoftDynamicsCrm",
      "typeVersion": 1,
      "position": [
        2100,
        200
      ],
      "credentials": {
        "microsoftDynamicsOAuth2Api": "dynamics-oauth2-api"
      },
      "disabled": true
    },
    {
      "parameters": {
        "to": "={{ $node[\"Webhook\"].json.emailAddress }}",
        "subject": "Thank you for contacting Jackson Investment Solutions",
        "text": "=Dear {{$node[\"Webhook\"].json.fullName || 'Valued Customer'}},\n\nThank you for reaching out to Jackson Investment Solutions. We've received your inquiry and one of our team members will contact you shortly.\n\nHere's a summary of your submission:\n\n- Name: {{$node[\"Webhook\"].json.fullName}}\n- Email: {{$node[\"Webhook\"].json.emailAddress}}\n- Phone: {{$node[\"Webhook\"].json.phoneNumber}}\n- Interest: {{$node[\"Webhook\"].json.interestType}}\n\n{{$node[\"Webhook\"].json.propertyAddress ? '- Property: ' + $node[\"Webhook\"].json.propertyAddress + '\n' : ''}}\n{{$node[\"Webhook\"].json.propertySituation ? '- Situation: ' + $node[\"Webhook\"].json.propertySituation + '\n' : ''}}\n{{$node[\"Webhook\"].json.sellTimeline ? '- Timeline: ' + $node[\"Webhook\"].json.sellTimeline + '\n' : ''}}\n\n{{$node[\"Webhook\"].json.additionalInfo ? 'Additional Notes: ' + $node[\"Webhook\"].json.additionalInfo + '\n\n' : ''}}\nIf you have any questions or need immediate assistance, please don't hesitate to contact us at (555) 123-4567.\n\nBest regards,\nThe Jackson Investment Solutions Team\n\n---\nJackson Investment Solutions\n123 Main Street\nGrand Rapids, MI 49503\nPhone: (555) 123-4567\nEmail: info@jacksoninvestmentsolutions.com\nWebsite: https://jacksoninvestmentsolutions.com\n\n*This is an automated message. Please do not reply to this email.*",
        "options": {}
      },
      "name": "Email - Send Confirmation",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [
        1000,
        500
      ],
      "credentials": {
        "smtp": "smtp-account"
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $node[\"Webhook\"].json.interestType || '' }}",
              "operation": "contains",
              "value2": "sell"
            }
          ]
        },
        "options": {}
      },
      "name": "IF Interest is Selling",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1400,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Prepare data for CRM or other systems\nconst formData = $input.item.json;\n\n// You can add custom logic here to format data for your CRM\nconst crmData = {\n  lead: {\n    firstName: formData.fullName ? formData.fullName.split(' ')[0] : 'Unknown',\n    lastName: formData.fullName ? formData.fullName.split(' ').slice(1).join(' ') || 'Lead' : 'Lead',\n    email: formData.emailAddress,\n    phone: formData.phoneNumber,\n    interest: formData.interestType,\n    propertyAddress: formData.propertyAddress,\n    situation: formData.propertySituation,\n    timeline: formData.sellTimeline,\n    notes: formData.additionalInfo,\n    source: 'Website Form',\n    timestamp: new Date().toISOString()\n  }\n};\n\n// Return the formatted data\nreturn {\n  json: crmData\n};"
      },
      "name": "Function - Format for CRM",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1750,
        500
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "https://hooks.zapier.com/hooks/catch/1234567/abc123",
        "options": {}
      },
      "name": "HTTP Request - Send to Zapier",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        2100,
        400
      ],
      "credentials": {
        "httpBasicAuth": {}
      },
      "disabled": true
    },
    {
      "parameters": {
        "path": "your-workflow",
        "options": {}
      },
      "id": "Webhook",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"formName\"]}}",
              "operation": "equal",
              "value2": "property-inquiry"
            }
          ]
        }
      },
      "id": "If Property Inquiry",
      "name": "If Property Inquiry",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [400, 200]
    },
    {
      "parameters": {
        "resource": "contact",
        "operation": "create",
        "email": "={{$json[\"emailAddress\"] || $json[\"email\"]}}",
        "additionalFields": {
          "attributes": {
            "FIRSTNAME": "={{$json[\"fullName\"]}}",
            "PHONE": "={{$json[\"phoneNumber\"]}}",
            "SOURCE": "={{$json[\"form-source\"]}}"
          }
        }
      },
      "id": "Brevo Add Contact",
      "name": "Brevo Add Contact",
      "type": "n8n-nodes-base.brevo",
      "typeVersion": 1,
      "position": [600, 200],
      "credentials": {
        "brevoApi": "YOUR_BREVO_CREDENTIAL"
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"formName\"]}}",
              "operation": "equal",
              "value2": "seller-guide-download"
            }
          ]
        }
      },
      "id": "If Seller Guide",
      "name": "If Seller Guide",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [400, 400]
    },
    {
      "parameters": {
        "resource": "contact",
        "operation": "create",
        "email": "={{$json[\"email\"]}}"
      },
      "id": "Brevo Add Seller Guide",
      "name": "Brevo Add Seller Guide",
      "type": "n8n-nodes-base.brevo",
      "typeVersion": 1,
      "position": [600, 400],
      "credentials": {
        "brevoApi": "YOUR_BREVO_CREDENTIAL"
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json[\"formName\"]}}",
              "operation": "equal",
              "value2": "buyer-guide-download"
            }
          ]
        }
      },
      "id": "If Buyer Guide",
      "name": "If Buyer Guide",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [400, 600]
    },
    {
      "parameters": {
        "resource": "contact",
        "operation": "create",
        "email": "={{$json[\"email\"]}}"
      },
      "id": "Brevo Add Buyer Guide",
      "name": "Brevo Add Buyer Guide",
      "type": "n8n-nodes-base.brevo",
      "typeVersion": 1,
      "position": [600, 600],
      "credentials": {
        "brevoApi": "YOUR_BREVO_CREDENTIAL"
      }
    }
  ],
  "connections": {
    "Function - Block Request": {
      "main": [
        []
      ]
    },
    "Function - Rate Limit Exceeded": {
      "main": [
        []
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "IF IP Missing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF IP Missing": {
      "main": [
        [
          {
            "node": "Function - Block Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ratelimiter - Track Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ratelimiter - Track Request": {
      "main": [
        [
          {
            "node": "Function - Check Rate Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function - Check Rate Limit": {
      "main": [
        [
          {
            "node": "IF Rate Limited",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Rate Limited": {
      "main": [
        [
          {
            "node": "Function - Rate Limit Exceeded",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Function - Validate Form Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function - Validate Form Data": {
      "main": [
        [
          {
            "node": "Function - Prepare Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function - Prepare Email": {
      "main": [
        [
          {
            "node": "Email - Send to Admin",
            "type": "main",
            "index": 0
          },
          {
            "node": "Email - Send Confirmation",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Email - Send to Admin": {
      "main": [
        [
          {
            "node": "IF Interest is Selling",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Interest is Selling": {
      "main": [
        [
          {
            "node": "IF Form is Property Inquiry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Form is Property Inquiry": {
      "main": [
        [
          {
            "node": "Dynamics 365 - Create Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Email - Send Confirmation": {
      "main": [
        [
          {
            "node": "Function - Format for CRM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function - Format for CRM": {
      "main": [
        [
          {
            "node": "HTTP Request - Send to Zapier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "If Property Inquiry",
            "type": "main",
            "index": 0
          },
          {
            "node": "If Seller Guide",
            "type": "main",
            "index": 0
          },
          {
            "node": "If Buyer Guide",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Property Inquiry": {
      "main": [
        [
          {
            "node": "Brevo Add Contact",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "If Seller Guide": {
      "main": [
        [
          {
            "node": "Brevo Add Seller Guide",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "If Buyer Guide": {
      "main": [
        [
          {
            "node": "Brevo Add Buyer Guide",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "id": "1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": ""
  },
  "versionId": "1.0.0",
  "tags": [
    "form",
    "lead generation",
    "jackson investments"
  ]
}
